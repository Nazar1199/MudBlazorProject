@using Blazor.Diagrams.Components.Renderers;
@using Blazor.Diagrams.Core.Models;
@using BlazorAppNet8.Classes;

<MudPaper class="departmentNode d-flex flex-column pa-2 ma-2 justify-content-center align-items-center" Elevation="3">
    @if (IsEditing)
    {
        <MudTextField @bind-Value="Node.Department.Name" Label="Название подразделения" />
    }
    else
    {
        <MudText Typo="Typo.h6">@Node.Department.Name</MudText>
    }

    <MudButtonGroup>
        @if (IsEditing)
        {
            <MudButton OnClick="SaveChanges">Save</MudButton>
            <MudButton OnClick="CancelEditing">Cancel</MudButton>
        }
        else
        {
            <MudButton OnClick="StartEditing">Edit</MudButton>
            <MudButton OnClick="DeleteDepartment">Del</MudButton>
            <MudButton OnClick="AddChildDepartment">Add</MudButton>
        }
    </MudButtonGroup>

    @foreach (var port in Node.Ports)
    {
        <PortRenderer @key="port" Port="port" />
    }
</MudPaper>

@code {
    [Parameter]
    public DepartmentNode Node { get; set; } = null!;

    [CascadingParameter]
    public MyDiagram ParentComponent { get; set; } = null!;

    private bool IsEditing = false;

    private void StartEditing()
    {
        IsEditing = true;
    }

    private void SaveChanges()
    {
        IsEditing = false;
        ParentComponent.UpdateDepartmentName(Node.Department.Id, Node.Department.Name);
    }

    private void CancelEditing()
    {
        IsEditing = false;
    }

    private void DeleteDepartment()
    {
        ParentComponent.DeleteDepartment(Node.Department.Id);
    }

    private void AddChildDepartment()
    {
        ParentComponent.AddChildDepartment(Node.Department.Id);
    }
}