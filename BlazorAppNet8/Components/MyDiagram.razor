@page "/my-diagram"
@using Blazor.Diagrams.Components
@using Blazor.Diagrams
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using BlazorAppNet8.Classes
@using BlazorAppNet8.Components.MyNodes

@namespace BlazorAppNet8.Components.MyNodes

<div class="diagram-container">
    <CascadingValue Value="this" IsFixed="true">
        <CascadingValue Value="Diagram" IsFixed="true">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private List<Department> Departments { get; set; } = new();

    protected override void OnInitialized()
    {
        Departments = DepartmentGenerator.GenerateDepartments();
        InitializeDiagram();
    }

    private void InitializeDiagram()
    {
        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
        };

        Diagram = new BlazorDiagram(options);
        Diagram.RegisterComponent<DepartmentNode, DepartmentWidget>();

        UpdateDiagram();
    }

    private void UpdateDiagram()
    {
        Diagram.Nodes.Clear();
        Diagram.Links.Clear();

        // Рисуем только корневые ноды
        var rootNodes = Departments.Where(d => !d.ParentId.HasValue).ToList();
        foreach (var root in rootNodes)
        {
            AddNodeWithChildren(root, false); // Изначально дочерние ноды скрыты
        }

        RecalculateNodePositions();
    }

    private void RecalculateNodePositions()
    {
        var visibleNodes = Diagram.Nodes.OfType<DepartmentNode>().ToList();
        var positions = NodePositionCalculator.CalculateVisiblePositions(visibleNodes);

        foreach (var node in visibleNodes)
        {
            if (positions.TryGetValue(node.Department.Id, out var newPosition))
            {
                node.SetPosition(newPosition.X, newPosition.Y); // Обновляем положение ноды
            }
        }

        Diagram.Refresh(); // Обновляем диаграмму для применения изменений
    }

    private void AddNodeWithChildren(Department department, bool showChildren)
    {
        var node = Diagram.Nodes.OfType<DepartmentNode>().FirstOrDefault(n => n.Department.Id == department.Id);
        if (node == null)
        {
            var position = NodePositionCalculator.CalculatePositions(Departments)[department.Id];
            node = new DepartmentNode(position)
            {
                Department = department
            };
            Diagram.Nodes.Add(node);
        }

        if (showChildren)
        {
            var children = Departments.Where(d => d.ParentId == department.Id).ToList();
            foreach (var child in children)
            {
                AddNodeWithChildren(child, false); // Дочерние ноды скрыты по умолчанию
                var parentPort = node.AddPort(PortAlignment.Bottom);
                var childNode = Diagram.Nodes.First(n => n is DepartmentNode dn && dn.Department.Id == child.Id);
                var childPort = childNode.AddPort(PortAlignment.Top);

                var sourceAnchor = new SinglePortAnchor(parentPort);
                var targetAnchor = new SinglePortAnchor(childPort);
                var link = new LinkModel(sourceAnchor, targetAnchor)
                {
                    TargetMarker = LinkMarker.Arrow
                };
                Diagram.Links.Add(link);
            }
        }

        node.OnToggleChildren = () =>
        {
            var childNodes = Diagram.Nodes.Where(n => n is DepartmentNode dn && dn.Department.ParentId == department.Id).ToList();

            if (childNodes.Any())
            {
                // Скрываем дочерние ноды и их связи
                foreach (var childNode in childNodes)
                {
                    Diagram.Nodes.Remove(childNode);

                    var childLinks = Diagram.Links.Where(l =>
                        l.Source is SinglePortAnchor sourceAnchor && sourceAnchor.Port.Parent == childNode ||
                        l.Target is SinglePortAnchor targetAnchor && targetAnchor.Port.Parent == childNode).ToList();
                    foreach (var link in childLinks)
                    {
                        Diagram.Links.Remove(link);
                    }

                    // Рекурсивно скрываем дочерние ноды
                    var childDepartment = ((DepartmentNode)childNode).Department;
                    if (childDepartment != null)
                    {
                        var grandChildNodes = Diagram.Nodes.Where(n => n is DepartmentNode dn && dn.Department.ParentId == childDepartment.Id).ToList();
                        foreach (var grandChildNode in grandChildNodes)
                        {
                            Diagram.Nodes.Remove(grandChildNode);
                        }
                    }
                }
            }
            else
            {
                // Показываем дочерние ноды и их связи
                AddNodeWithChildren(department, true);
            }

            RecalculateNodePositions(); // Перерасчет положений нод
        };
    }

    public void AddChildDepartment(int parentId)
    {
        var newDepartment = new Department
        {
            Id = Departments.Max(d => d.Id) + 1,
            Name = $"Новое подразделение {Departments.Max(d => d.Id) + 1}",
            ParentId = parentId
        };

        Departments.Add(newDepartment);

        // Preserve the expanded state of nodes
        var expandedNodes = Diagram.Nodes.OfType<DepartmentNode>()
            .Where(n => Diagram.Nodes.Any(cn => cn is DepartmentNode dn && dn.Department.ParentId == n.Department.Id))
            .Select(n => n.Department.Id)
            .ToHashSet();

        UpdateDiagram();

        // Re-expand previously expanded nodes
        foreach (var nodeId in expandedNodes)
        {
            var node = Diagram.Nodes.OfType<DepartmentNode>().FirstOrDefault(n => n.Department.Id == nodeId);
            if (node != null)
            {
                node.OnToggleChildren?.Invoke();
            }
        }

        // Automatically expand the parent of the newly created node if not already expanded
        var parentNode = Diagram.Nodes.OfType<DepartmentNode>().FirstOrDefault(n => n.Department.Id == parentId);
        if (parentNode != null)
        {
            var isParentExpanded = Diagram.Nodes.OfType<DepartmentNode>()
                .Any(n => n.Department.ParentId == parentId);

            if (!isParentExpanded)
            {
                parentNode.OnToggleChildren?.Invoke();
            }
        }
    }

    public void DeleteDepartment(int departmentId)
    {
        // Preserve the expanded state of nodes
        var expandedNodes = Diagram.Nodes.OfType<DepartmentNode>()
            .Where(n => Diagram.Nodes.Any(cn => cn is DepartmentNode dn && dn.Department.ParentId == n.Department.Id))
            .Select(n => n.Department.Id)
            .ToHashSet();

        var departmentToRemove = Departments.FirstOrDefault(d => d.Id == departmentId);
        if (departmentToRemove != null)
        {
            Departments.Remove(departmentToRemove);

            var children = Departments.Where(d => d.ParentId == departmentId).ToList();
            foreach (var child in children)
            {
                Departments.Remove(child);
            }

            UpdateDiagram();

            // Re-expand previously expanded nodes
            foreach (var nodeId in expandedNodes)
            {
                var node = Diagram.Nodes.OfType<DepartmentNode>().FirstOrDefault(n => n.Department.Id == nodeId);
                if (node != null)
                {
                    node.OnToggleChildren?.Invoke();
                }
            }
        }
    }

    public void UpdateDepartmentName(int departmentId, string newName)
    {
        var department = Departments.FirstOrDefault(d => d.Id == departmentId);
        if (department != null)
        {
            department.Name = newName;
            UpdateDiagram();
        }
    }
}

<style>
    .diagram-container {
        width: 100%;
        height: 850px;
        border: solid 1px black;
        border-radius: 10px;
    }
</style>