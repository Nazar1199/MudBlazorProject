@page "/my-diagram"
@using Blazor.Diagrams.Components
@using Blazor.Diagrams
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using BlazorAppNet8.Classes

@namespace BlazorAppNet8.Components.MyNodes

<div class="diagram-container">
    <CascadingValue Value="this" IsFixed="true">
        <CascadingValue Value="Diagram" IsFixed="true">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private List<Department> Departments { get; set; } = new();

    protected override void OnInitialized()
    {
        Departments = DepartmentGenerator.GenerateDepartments();
        InitializeDiagram();
    }

    private void InitializeDiagram()
    {
        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = false,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
        };

        Diagram = new BlazorDiagram(options);
        Diagram.RegisterComponent<DepartmentNode, DepartmentWidget>();

        UpdateDiagram();
    }

    private void UpdateDiagram()
    {
        Diagram.Nodes.Clear();
        Diagram.Links.Clear();

        var nodePositions = NodePositionCalculator.CalculatePositions(Departments);

        var nodeDictionary = new Dictionary<int, DepartmentNode>();

        foreach (var department in Departments)
        {
            var position = nodePositions[department.Id];
            var node = new DepartmentNode(position)
            {
                Department = department
            };

            Diagram.Nodes.Add(node);
            nodeDictionary[department.Id] = node;
        }

        foreach (var department in Departments)
        {
            if (department.ParentId.HasValue && nodeDictionary.TryGetValue(department.ParentId.Value, out var parentNode))
            {
                var childNode = nodeDictionary[department.Id];

                var parentPort = parentNode.AddPort(PortAlignment.Bottom);
                var childPort = childNode.AddPort(PortAlignment.Top);

                var sourceAnchor = new SinglePortAnchor(parentPort);
                var targetAnchor = new SinglePortAnchor(childPort);
                var link = new LinkModel(sourceAnchor, targetAnchor);
                link.TargetMarker = LinkMarker.Arrow;
                Diagram.Links.Add(link);
            }
        }
    }

    public void AddChildDepartment(int parentId)
    {
        var newDepartment = new Department
        {
            Id = Departments.Max(d => d.Id) + 1,
            Name = $"Новое подразделение {Departments.Max(d => d.Id) + 1}",
            ParentId = parentId
        };

        Departments.Add(newDepartment);
        UpdateDiagram();
    }

    public void DeleteDepartment(int departmentId)
    {
        var departmentToRemove = Departments.FirstOrDefault(d => d.Id == departmentId);
        if (departmentToRemove != null)
        {
            Departments.Remove(departmentToRemove);

            var children = Departments.Where(d => d.ParentId == departmentId).ToList();
            foreach (var child in children)
            {
                Departments.Remove(child);
            }

            UpdateDiagram();
        }
    }

    public void UpdateDepartmentName(int departmentId, string newName)
    {
        var department = Departments.FirstOrDefault(d => d.Id == departmentId);
        if (department != null)
        {
            department.Name = newName;
            UpdateDiagram();
        }
    }
}

<style>
    .diagram-container {
        width: 100%;
        height: 850px;
        border: solid 1px black;
        border-radius: 10px;
    }
</style>