@page "/my-diagram"
@using Blazor.Diagrams.Components
@using Blazor.Diagrams
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using BlazorAppNet8.Classes

@namespace BlazorAppNet8.Components.MyNodes

<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private List<Department> Departments { get; set; } = new();

    protected override void OnInitialized()
    {
        Departments = DepartmentGenerator.GenerateDepartments();

        var nodePositions = NodePositionCalculator.CalculatePositions(Departments);

        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom =
            {
                Enabled = false,
            },
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);
        Diagram.RegisterComponent<DepartmentNode, DepartmentWidget>();

        var nodeDictionary = new Dictionary<int, DepartmentNode>();

        foreach (var department in Departments)
        {
            var position = nodePositions[department.Id];
            var node = new DepartmentNode(position)
                {
                    Department = department
                };

            Diagram.Nodes.Add(node);
            nodeDictionary[department.Id] = node;
        }

        foreach (var department in Departments)
        {
            if (department.ParentId.HasValue && nodeDictionary.TryGetValue(department.ParentId.Value, out var parentNode))
            {
                var childNode = nodeDictionary[department.Id];

                var parentPort = parentNode.AddPort(PortAlignment.Bottom);
                var childPort = childNode.AddPort(PortAlignment.Top);

                var sourceAnchor = new SinglePortAnchor(parentPort);
                var targetAnchor = new SinglePortAnchor(childPort);
                var link = Diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));
                link.Router = new NormalRouter();
            }
        }
    }
}

<style>
    .diagram-container {
        width: 100%;
        height: 800px;
        border: solid 1px black;
        border-radius: 10px;
    }
</style>